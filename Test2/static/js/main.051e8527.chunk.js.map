{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","list","id","Date","getTime","toString","text","handleClickAddItem","e","inputFieldText","inputField","current","value","myList","push","setState","handleClickRemoveItem","targetValue","target","attributes","item_id","newList","filter","item","React","createRef","my_todo_list","this","map","el","className","key","onClick","ref","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOA2FeA,G,wDAvFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGRC,MAAQ,CACNC,KAAM,CACJ,CACEC,IAAI,IAAIC,MAAOC,UAAUC,WACzBC,KAAM,iBARO,EAanBC,mBAAqB,SAACC,GAEpB,IAAIC,EAAiB,EAAKC,WAAWC,QAAQC,MAK7C,GAAuB,KAAnBH,EAAJ,CAKA,EAAKC,WAAWC,QAAQC,MAAQ,GAGhC,IAAIC,EAAS,EAAKb,MAAMC,KAGxBY,EAAOC,KAAK,CAEVZ,IAAI,IAAIC,MAAOC,UAAUC,WACzBC,KAAMG,IAIR,EAAKM,SAAS,CACZd,KAAMY,MAvCS,EA2CnBG,sBAAwB,SAACR,GAOvB,IAAIS,EAAcT,EAAEU,OAAOC,WAAWC,QAAQR,MAE1CS,EAAU,EAAKrB,MAAMC,KAAKqB,QAAO,SAACC,GACpC,OAAON,IAAgBM,EAAKrB,MAI9B,EAAKa,SAAS,CACZd,KAAMoB,KAxDR,EAAKX,WAAac,IAAMC,YAFP,E,qDA8DT,IAAD,OAEHC,EAAeC,KAAK3B,MAAMC,KAAK2B,KAAI,SAACC,GACtC,OACE,yBAAKC,UAAU,WAAWC,IAAKF,EAAG3B,GAAIkB,QAASS,EAAG3B,IAChD,6BAAM2B,EAAGvB,MACT,4BAAQc,QAASS,EAAG3B,GAAI8B,QAAS,EAAKhB,uBAAtC,YAQN,OACE,yBAAKc,UAAU,OACb,4CACA,2BAAOG,IAAKN,KAAKjB,WAAYwB,YAAY,sBACzC,4BAAQF,QAASL,KAAKpB,oBAAtB,YACA,6BAAMmB,Q,GAlFIS,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.051e8527.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.inputField = React.createRef();\n  }\n  state = {\n    list: [\n      {\n        id: new Date().getTime().toString(),\n        text: \"Add an item\",\n      },\n    ],\n  };\n\n  handleClickAddItem = (e) => {\n    // Get text of inputfield\n    let inputFieldText = this.inputField.current.value;\n    // console.log(this.inputField.current)\n    // console.log(inputFieldText)\n\n    // If input field was empty, dont do anything\n    if (inputFieldText === \"\") {\n      return;\n    }\n\n    // Clear input field\n    this.inputField.current.value = \"\";\n\n    // Make copy of the list\n    let myList = this.state.list;\n\n    // Push new item\n    myList.push({\n      // Get time in milliseconds\n      id: new Date().getTime().toString(),\n      text: inputFieldText,\n    });\n\n    // Update state\n    this.setState({\n      list: myList,\n    });\n  };\n\n  handleClickRemoveItem = (e) => {\n    // Dont seem to be able to retrieve the react `key` from the DOM\n    // console.log(e.target.parentElement.attributes.key)\n\n    /// Remove item from TODO list after it is marked as 'done'\n    // console.log(e.target.parentElement.attributes.item_id.value)\n    // console.log(e.target.attributes.item_id.value)\n    let targetValue = e.target.attributes.item_id.value;\n    // TODO Instead of filtering the whole list, get index of this component and then remove it\n    let newList = this.state.list.filter((item) => {\n      return targetValue !== item.id;\n    });\n\n    // Update state\n    this.setState({\n      list: newList,\n    });\n  };\n\n  render() {\n    // This is run on every state change\n    let my_todo_list = this.state.list.map((el) => {\n      return (\n        <div className=\"todoItem\" key={el.id} item_id={el.id}>\n          <div>{el.text}</div>\n          <button item_id={el.id} onClick={this.handleClickRemoveItem}>\n            Done\n          </button>\n        </div>\n      );\n    });\n\n    // Return jsx of component\n    return (\n      <div className=\"App\">\n        <h1>My TODO list</h1>\n        <input ref={this.inputField} placeholder=\"Add new TODO item\"></input>\n        <button onClick={this.handleClickAddItem}>Add item</button>\n        <div>{my_todo_list}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}